


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY
    2 00000000                 EXPORT           fibonacci
    3 00000000         ; R0: 8-bit variabile
    4 00000000         
    5 00000000         fibonacci
    6 00000000 46EC            MOV              R12, SP
    7 00000002 E92D 4DF0       STMFD            SP!, {R4-R8, R10, R11, LR}
    8 00000006         
    9 00000006 F04F 0100       MOV              R1, #0      ; fibo0
   10 0000000A F04F 0201       MOV              R2, #1      ; fibo1
   11 0000000E         
   12 0000000E 4288            CMP              R0, R1
   13 00000010 BF08 27FF       MOVEQ            R7, #0xFF
   14 00000014 D017            BEQ              result
   15 00000016         
   16 00000016 F04F 0300       MOV              R3, #0      ; flag
   17 0000001A F04F 0401       MOV              R4, #1      ; fibo2
   18 0000001E 2B01    loop    CMP              R3, #1
   19 00000020 D011            BEQ              result
   20 00000022         
   21 00000022 EB01 0402       ADD              R4, R1, R2  ; fibo2 = fibo0 + f
                                                            ibo1
   22 00000026 4611            MOV              R1, R2      ; fibo0 = fibo1
   23 00000028 4622            MOV              R2, R4      ; fibo1 = fibo2
   24 0000002A         
   25 0000002A 42A0            CMP              R0, R4      ; belongs to fibo
   26 0000002C BF08 27FF       MOVEQ            R7, #0xFF
   27 00000030 D009            BEQ              result
   28 00000032 BFC8 1B05       SUBGT            R5, R0, R4  ; d_prev = elem - f
                                                            ibo2
   29 00000036 BFBF 1A26       SUBLT            R6, R4, R0  ; d_next = fibo2 - 
                                                            elem
   30 0000003A 2301            MOVLT            R3, #1
   31 0000003C 42B5            CMPLT            R5, R6      ; if(elem < fibo2)
   32 0000003E 460F            MOVLT            R7, R1
   33 00000040 BFC8 4627       MOVGT            R7, R4
   34 00000044         
   35 00000044 E7EB            B                loop
   36 00000046         
   37 00000046 4638    result  MOV              R0, R7      ; store result
   38 00000048 E8BD 4DF0       LDMFD            SP!, {R4-R8, R10, R11, LR}
   39 0000004C         
   40 0000004C 4770            BX               LR
   41 0000004E         
   42 0000004E                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\standard_procedure.d -o.\standard_procedure.o -I.\RTE\_Target_1 
-IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\
Keil\LPC1700_DFP\2.7.1\Device\Include --predefine="__UVISION_VERSION SETA 536" 
--predefine="_RTE_ SETA 1" --predefine="LPC175x_6x SETA 1" --predefine="_RTE_ S
ETA 1" --list=.\standard_procedure.lst assembly\standard_procedure.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file assembly\standard_procedure.s
   Uses
      None
Comment: .text unused
fibonacci 00000000

Symbol: fibonacci
   Definitions
      At line 5 in file assembly\standard_procedure.s
   Uses
      At line 2 in file assembly\standard_procedure.s
Comment: fibonacci used once
loop 0000001E

Symbol: loop
   Definitions
      At line 18 in file assembly\standard_procedure.s
   Uses
      At line 35 in file assembly\standard_procedure.s
Comment: loop used once
result 00000046

Symbol: result
   Definitions
      At line 37 in file assembly\standard_procedure.s
   Uses
      At line 14 in file assembly\standard_procedure.s
      At line 19 in file assembly\standard_procedure.s
      At line 27 in file assembly\standard_procedure.s

4 symbols
337 symbols in table
